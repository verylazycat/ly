//
// Created by admin233 on 2021/12/8.
//

#include "Malware.h"

bool Malware::CheckClamdconf(void){
    int fd = open(this->clamdconf.c_str(),O_RDONLY);
    if (fd == 0){
        close(fd);
        return false;
    }
    close(fd);
    return true;
}
// cd /var/lib/clamav
// wget http://database.clamav.net/main.cvd
// wget http://database.clamav.net/daily.cvd
// wget http://database.clamav.net/bytecode.cvd
void Malware::UpdateDataBase(void){
    auto logger = spdlog::basic_logger_mt("UpdateDataBase_logger", "logs/basic-log.txt");
    if (!CheckClamdconf()){
        spdlog::critical("You did not install clamav");
        spdlog::critical("updata databases fail");
        logger->critical("You did not install clamav");
        logger->critical("updata databases fail");
        return;
    }
    spdlog::info("updata databases ...");
    char res[1024];
    bzero(res,sizeof(res));
    const char *stopupdate = "systemctl stop clamav-freshclam";
    const char *updatadatabase = "sudo freshclam";
    spdlog::info("stop clamav-freshclam server...");
    logger->info("stop clamav-freshclam server...");
    Utils::executeCMD(stopupdate,res);
    bzero(res,sizeof(res));
    spdlog::info("update clamav database...");
    logger->info("update clamav database...");
    Utils::executeCMD(updatadatabase,res);
    spdlog::info("updata info:{}",res);
    logger->info("updata info:{}",res);
    return;
}
// https://zh.codepre.com/how-to-9177.html#:~:text=ClamAV%E5%8C%85%E6%8B%AC%E4%B8%80%E4%B8%AA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F%E5%AE%88%E6%8A%A4%E7%A8%8B%E5%BA%8F%EF%BC%8C%E7%94%A8%E4%BA%8E%E6%8C%89%E9%9C%80%E6%96%87%E4%BB%B6%E6%89%AB%E6%8F%8F%E5%92%8C%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%90%8D%E6%9B%B4%E6%96%B0%E7%9A%84%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%AE%9E%E7%94%A8%E7%A8%8B%E5%BA%8F%E3%80%82%20%E5%AE%83%E7%9A%84%E4%B8%BB%E8%A6%81%E7%94%A8%E9%80%94%E4%B9%8B%E4%B8%80%E6%98%AF%E5%9C%A8%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E4%BD%9C%E4%B8%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E7%97%85%E6%AF%92%E6%89%AB%E6%8F%8F%E7%A8%8B%E5%BA%8F%E3%80%82,%E9%A6%96%E5%85%88%EF%BC%8C%E6%9B%B4%E6%96%B0%E7%B3%BB%E7%BB%9F%E8%BD%AF%E4%BB%B6%E5%8C%85%E7%BC%93%E5%AD%98%E3%80%82%20%E9%BB%98%E8%AE%A4%E7%9A%84Ubuntu%2020.04%E5%AD%98%E5%82%A8%E5%BA%93%E5%8C%85%E5%90%ABClamAV%E7%9A%84%E6%9C%80%E6%96%B0%E7%A8%B3%E5%AE%9A%E5%8F%91%E8%A1%8C%E7%89%88%E3%80%82
void Malware::FullScan(void){
    auto logger = spdlog::basic_logger_mt("UpdateDataBase_logger", "logs/basic-log.txt");
    if (!CheckClamdconf()){
        spdlog::critical("You did not install clamav");
        spdlog::critical("updata databases fail");
        logger->critical("You did not install clamav");
        logger->critical("updata databases fail");
        return;
    }
    char res[1024];
    bzero(res,sizeof(res));
    const char *startserver = "systemctl start clamav-freshclam";
    const char *FullScan = "clamscan -r -i --max-scansize=4000M --max-filesize=4000M /";
    Utils::executeCMD(startserver,res);
    bzero(res,sizeof(res));
    Utils::executeCMD(FullScan,res);
    bzero(res,sizeof(res));  
}
void Malware::BinScan(void){
    auto logger = spdlog::basic_logger_mt("BinScan_logger", "logs/basic-log.txt");
    if (!CheckClamdconf()){
        spdlog::critical("You did not install clamav");
        spdlog::critical("updata databases fail");
        logger->critical("You did not install clamav");
        logger->critical("updata databases fail");
        return;
    }
    char res[1024];
    bzero(res,sizeof(res));
    const char *startserver = "systemctl start clamav-freshclam";
    const char *BinScan = "clamscan -r -i --max-scansize=4000M --max-filesize=4000M /bin/";
    spdlog::info("start clamav-freshclam server...");
    logger->info("start clamav-freshclam server...");
    Utils::executeCMD(startserver,res);
    bzero(res,sizeof(res));
    spdlog::info("start clamav-scan bin...");
    logger->info("start clamav-scan bin...");
    Utils::executeCMD(BinScan,res);
    spdlog::info("bin info:{}",res);
    logger->info("bin info:{}",res);
    bzero(res,sizeof(res)); 
}